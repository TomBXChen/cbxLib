apply plugin: 'com.android.application'

android {
    compileSdkVersion rootProject.ext.android_client["compileSdkVersion"]
    buildToolsVersion rootProject.ext.android_client["buildToolsVersion"]
    useLibrary 'org.apache.http.legacy'


    compileOptions {
        targetCompatibility JavaVersion.VERSION_1_8
        sourceCompatibility JavaVersion.VERSION_1_8
    }


    defaultConfig {
        applicationId "com.cbx.lib"
        minSdkVersion rootProject.ext.android_client["minSdkVersion"]
        targetSdkVersion rootProject.ext.android_client["targetSdkVersion"]
        versionCode rootProject.ext.android_client["versionCode"]
        versionName rootProject.ext.android_client["versionName"]


        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [moduleName: project.getName()]
            }
        }

        multiDexEnabled true
        vectorDrawables.useSupportLibrary = true

        sourceSets {
            main {
                res.srcDirs =
                        [
                                'src/main/res/layouts/activity',
                                'src/main/res/layouts/common',
                                'src/main/res/layouts/adapter',
                                'src/main/res'
                        ]
            }
            // Move the tests to tests/java, tests/res, eGtc...
//            instrumentTest.setRoot('tests')
            // Move the build types to build-types/<type>
            // For instance, build-types/debug/java, build-types/debug/AndroidManifest.xml, ...
            // This moves them out of them default location under src/<type>/... which would
            // conflict with src/ being used by the main source set.
            // Adding new build types or product flavors should be accompanied
            // by a similar customization.
            debug.setRoot('build-types/debug')
            release.setRoot('build-types/release')
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    buildTypes {
        debug {
//            signingConfig signingConfigs.debug
            buildConfigField "boolean", "LOG_DEBUG", "true"
            buildConfigField "boolean", "USE_CANARY", "true"
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
//            multiDexKeepProguard file('./multidex-config.pro')
        }
        release {
//            signingConfig signingConfigs.release
            buildConfigField "boolean", "LOG_DEBUG", "false"
            buildConfigField "boolean", "USE_CANARY", "false"
            minifyEnabled true
            shrinkResources true
            zipAlignEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
//            multiDexKeepProguard file('./multidex-config.pro')
        }

    }
    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'me.jessyan:arms:2.4.1'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    annotationProcessor rootProject.ext.dependencies["dagger2-compiler"]
    implementation rootProject.ext.dependencies["multidex"]
    implementation rootProject.ext.dependencies["progressmanager"]
    implementation rootProject.ext.dependencies["retrofit-url-manager"]
    annotationProcessor rootProject.ext.dependencies["arouter-compiler"]
    //view
    annotationProcessor(rootProject.ext.dependencies["butterknife-compiler"]) {
        exclude module: 'support-annotations'
    }
    implementation project(':thdlibrary')
    implementation project(':baselibrary')
    api project(path: ':gallery_library')
}
